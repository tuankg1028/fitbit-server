# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - name: Check Out Repo 
      uses: actions/checkout@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v1
      id: buildx
    
    - name: Cache Docker Image Layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
            
    - name: Build and push (API)
      id: docker_build_api
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: api/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fitbit-api:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache
        
    - name: Build and push (WEB)
      id: docker_build_web
      uses: docker/build-push-action@v2
      with:
        context: ./
        file: frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fitbit-web:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Image digest (API)
      run: echo ${{ steps.docker_build_api.outputs.digest }}
      
    - name: Image digest (WEB)
      run: echo ${{ steps.docker_build_web.outputs.digest }}

    - name: Copy deploy files to Remote server via ssh password
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        rm: true
        source: "docker-compose.yml,deploy.sh"
        target: "${{ secrets.TARGER_DIR }}/fitbit-server"

    - name: Deploy stacks 
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: cd ${{ secrets.TARGER_DIR }}/fitbit-server && sh deploy.sh

    
  
